{"ts":1361574640910,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1361574733323,"patch":[[{"diffs":[[1,"/**\r\n * @author      SÃ©bastien Bolduc    <sebastien.bolduc@gmail.com>\r\n * @version     0.0                 (current version number of program)\r\n * @since       2013-02-22          (the version of the package this class was first added to)\r\n */\r\n\r\n// create global namespace\r\nwindow.WAF = window.WAF || {};\r\nwindow.WAF.game = window.WAF.game || {};\r\n\r\n// using IIFE (Immediately-Invoked Function Expression) to give each file its own local scope\r\n(function(namespace, undefined) {\r\n    // public methods and properties\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param\r\n     * @return \r\n     */\r\n    namespace.Rectangle = function() {\r\n    };\r\n    \r\n    // private methods and properties\r\n    var game = window.WAF.game;\r\n    \r\n}(window.WAF.game = window.WAF.game || {}));"]],"start1":0,"start2":0,"length1":0,"length2":775}]],"length":775,"saved":false}
{"ts":1361575103895,"patch":[[{"diffs":[[0,"aram"],[-1,"\r\n     * @return \r\n     */\r\n    namespace.Rectangle = function() {"],[1," x      The x-coordinate of the rectangle.\r\n     * @param y      The y-coordinate of the rectangle.\r\n     * @param width  Width of the rectangle.\r\n     * @param height Height of the rectangle.\r\n     * @return \r\n     */\r\n    namespace.Rectangle = function(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    };\r\n    \r\n    /**\r\n     * Determines whether a specified Rectangle intersects with this Rectangle.\r\n     * \r\n     * @param  rectangle The Rectangle to evaluate.\r\n     * @return True if the specified rectangle intersects with this one, false otherwise.\r\n     */\r\n    namespace.Rectangle.prototype.intersects = function(rectangle) {\r\n        var _min = this.x;\r\n        var _max = rectangle.x + rectangle.width - 1;\r\n    \r\n        if (_min > _max) {\r\n            return false;\r\n        }\r\n        \r\n        var min_ = rectangle.x;\r\n        var max_ = this.x + this.width - 1;\r\n    \r\n        if (min_ > max_) {\r\n            return false;\r\n        }\r\n    \r\n        _min = this.y;\r\n        _max = rectangle.y + rectangle.height - 1;\r\n    \r\n        if (_min > _max) {\r\n            return false;\r\n        }\r\n        \r\n        min_ = rectangle.y;\r\n        max_ = this.y + this.height - 1;\r\n    \r\n        if (min_ > max_) {\r\n            return false;\r\n        }\r\n    \r\n        return true;"],[0,"\r\n  "]],"start1":567,"start2":567,"length1":74,"length2":1373}]],"length":2074,"saved":false}
{"ts":1361575388876,"patch":[[{"diffs":[[0,"ctangle) {\r\n"],[1,"        // left side (this) vs. right side (rectangle)\r\n"],[0,"        var "]],"start1":1276,"start2":1276,"length1":24,"length2":80},{"diffs":[[0," = this.x;\r\n"],[-1,""],[0,"        var "]],"start1":1360,"start2":1360,"length1":24,"length2":24},{"diffs":[[0,"   }\r\n        \r\n"],[1,"        // right side (this) vs. left side (rectangle)\r\n"],[0,"        var min_"]],"start1":1493,"start2":1493,"length1":32,"length2":88},{"diffs":[[0,"       }\r\n    \r\n"],[1,"        // top side (this) vs. bottom side (rectangle)\r\n"],[0,"        _min = t"]],"start1":1705,"start2":1705,"length1":32,"length2":88},{"diffs":[[0,"se;\r\n        }\r\n"],[-1,""],[0,"        \r\n      "]],"start1":1909,"start2":1909,"length1":32,"length2":32},{"diffs":[[0,"   }\r\n        \r\n"],[1,"        // bottom side (this) vs. top side (rectangle)\r\n"],[0,"        min_ = r"]],"start1":1919,"start2":1919,"length1":32,"length2":88}]],"length":2298,"saved":false}
{"ts":1361576937774,"patch":[[{"diffs":[[0," \r\n    /**\r\n"],[1,"     * Translate a rectangle.\r\n     * \r\n     * @param x Translation along the X axis in pixel.\r\n     * @param y Translation along the Y axis in pixel.\r\n     * @return \r\n     */\r\n    namespace.Rectangle.prototype.translate = function(x, y) {\r\n        this.x = x;\r\n        this.y = y;  \r\n    }\r\n    \r\n    /**\r\n"],[0,"     * Deter"]],"start1":963,"start2":963,"length1":24,"length2":332}]],"length":2606,"saved":false}
