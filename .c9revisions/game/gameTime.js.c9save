{"ts":1361150633735,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1361151900439,"patch":[[{"diffs":[[1,"/**\r\n * @author      SÃ©bastien Bolduc    <sebastien.bolduc@gmail.com>\r\n * @version     0.0                 (current version number of program)\r\n * @since       2013-02-17          (the version of the package this class was first added to)\r\n */\r\n\r\n// create global namespace\r\nwindow.WAF = window.WAF || {};\r\nwindow.WAF.game = window.WAF.game || {};\r\n\r\n// using IIFE (Immediately-Invoked Function Expression) to give each file its own local scope\r\n(function(namespace, undefined) {\r\n    // public methods and properties\r\n    namespace.currentGameTime = 0;\r\n    namespace.elapsedGameTime = 0;\r\n    \r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param \r\n     * @return \r\n     */\r\n    namespace.GameTime = function() {\r\n        namespace.currentGameTime = new Date().getTime();\r\n        namespace.elapsedGameTime = namespace.currentGameTime;\r\n    };\r\n    \r\n    /**\r\n     * Updating the amount of elapsed game time since the last update.\r\n     * \r\n     * @param \r\n     * @return \r\n     */\r\n    namespace.GameTime.prototype.update = function()\r\n    {   \r\n        namespace.elapsedGameTime = (new Date().getTime()) - namespace.currentGameTime;    \r\n        \r\n        namespace.currentGameTime = new Date().getTime();\r\n    };\r\n    \r\n    // private methods and properties\r\n    var game = window.WAF.game;\r\n    \r\n}(window.WAF.game = window.WAF.game || {}));"]],"start1":0,"start2":0,"length1":0,"length2":1348}]],"length":1348,"saved":false}
{"ts":1361152742677,"patch":[[{"diffs":[[0,"    "],[-1,"namespace.currentGameTime = 0;\r\n    namespace.elapsedGameTime = 0;\r\n    \r\n    "],[0,""],[1,""],[0,"/**\r"]],"start1":519,"start2":519,"length1":86,"length2":8},{"diffs":[[0," {\r\n        "],[-1,"namespace"],[1,"this.currentGameTime = 0;\r\n        this.elapsedGameTime = 0;\r\n        \r\n        this"],[0,".currentGame"]],"start1":635,"start2":635,"length1":33,"length2":108},{"diffs":[[0,");\r\n        "],[-1,"namespace"],[1,"this"],[0,".elapsedGame"]],"start1":769,"start2":769,"length1":33,"length2":28},{"diffs":[[0,"        "],[-1,"namespace"],[1,"this"],[0,".elapsed"]],"start1":1042,"start2":1042,"length1":25,"length2":20},{"diffs":[[0,"me()) - "],[-1,"namespace"],[1,"this"],[0,".current"]],"start1":1090,"start2":1090,"length1":25,"length2":20},{"diffs":[[0,"        "],[-1,"namespace"],[1,"this"],[0,".current"]],"start1":1135,"start2":1135,"length1":25,"length2":20}]],"length":1325,"saved":false}
{"ts":1361155709773,"patch":[[{"diffs":[[0,"e = 0;\r\n        "],[-1,""],[0,""],[1,"this.averageFPS = [];\r\n        this.averageTBF = [];\r\n        "],[0,"\r\n        this.c"]],"start1":701,"start2":701,"length1":32,"length2":94},{"diffs":[[0,"nction()"],[-1,"\r\n   "],[0,""],[1,""],[0," {   \r\n "]],"start1":1084,"start2":1084,"length1":21,"length2":16},{"diffs":[[0,"ime();\r\n    "],[-1,"};\r\n"],[0,"    "],[1,"\r\n        // fps\r\n        this.averageFPS.push(1000 / this.elapsedGameTime);\r\n        // tbf\r\n        this.averageTBF.push(this.elapsedGameTime);\r\n    };\r\n    \r\n    /**\r\n     * Return the average frame per second achieve by the program.\r\n     * \r\n     * @param \r\n     * @return Average frame per second. \r\n     */\r\n    namespace.GameTime.prototype.averageFramePerSecond = function() {\r\n        var averageFPS = 0;\r\n        \r\n        // keep a maximum of 10 elements\r\n        if (this.averageFPS.length > 10) {\r\n            this.averageFPS.shift();\r\n        }\r\n        \r\n        this.averageFPS.forEach(function(fps) {\r\n               averageFPS += fps;\r\n        });\r\n        \r\n        return Math.floor(averageFPS / this.averageFPS.length);\r\n    };\r\n"],[0,"\r\n    // pri"]],"start1":1238,"start2":1238,"length1":32,"length2":778}]],"length":2128,"saved":false}
{"ts":1361156457631,"patch":[[{"diffs":[[0,"\n    };\r"],[1,"\n    \r\n    /**\r\n     * Return the average frame per second achieve by the program.\r\n     * \r\n     * @param \r\n     * @return Average frame per second. \r\n     */\r\n    namespace.GameTime.prototype.averageTimeBetweenFrame = function() {\r\n        var averageTBF = 0;\r\n        \r\n        // keep a maximum of 10 elements\r\n        if (this.averageTBF.length > 10) {\r\n            this.averageTBF.shift();\r\n        }\r\n        \r\n        this.averageTBF.forEach(function(tbf) {\r\n               averageTBF += tbf;\r\n        });\r\n        \r\n        return Math.floor(averageTBF / this.averageTBF.length);\r\n    };\r"],[0,"\n\r\n    /"]],"start1":1995,"start2":1995,"length1":16,"length2":613}]],"length":2725,"saved":false}
{"ts":1361156602300,"patch":[[{"diffs":[[0,"average "],[-1,"frame per second"],[1,"time between frame"],[0," achieve"]],"start1":2037,"start2":2037,"length1":32,"length2":34},{"diffs":[[0,"Average "],[-1,"frame per second"],[1,"time between frame"],[0,". \r\n    "]],"start1":2129,"start2":2129,"length1":32,"length2":34}]],"length":2729,"saved":false}
