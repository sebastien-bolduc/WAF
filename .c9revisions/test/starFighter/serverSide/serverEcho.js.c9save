{"ts":1361891321121,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1361891330028,"patch":[[{"diffs":[[1,"/**\r\n * @author      SÃ©bastien Bolduc    <sebastien.bolduc@gmail.com>\r\n * @version     0.0                 (current version number of program)\r\n * @since       2013-02-26          (the version of the package this class was first added to)\r\n */\r\n \r\n"]],"start1":0,"start2":0,"length1":0,"length2":248}]],"length":248,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361896303652,"patch":[[{"diffs":[[0,"*/\r\n"],[-1," "],[0,"\r\n"],[1,"// requires node's\r\nvar WebSocketServer = require('websocket').server;\r\nvar http = require('http');\r\n\r\n// info\r\nvar port = process.env.PORT;\r\n\r\nvar server = http.createServer(function(request, response) {\r\n    console.log((new Date()) + ' Received request for ' + request.url);\r\n    response.writeHead(404);\r\n    response.end();\r\n});\r\nserver.listen(port, function() {\r\n    console.log((new Date()) + ' Server is listening on port ' + port);\r\n});\r\n\r\nvar wsServer = new WebSocketServer({\r\n    httpServer: server,\r\n    // You should not use autoAcceptConnections for production\r\n    // applications, as it defeats all standard cross-origin protection\r\n    // facilities built into the protocol and the browser.  You should\r\n    // *always* verify the connection's origin and decide whether or not\r\n    // to accept it.\r\n    autoAcceptConnections: false\r\n});\r\n\r\nconsole.log(wsServer.location);\r\n\r\nfunction originIsAllowed(origin) {\r\n  // put logic here to detect whether the specified origin is allowed.\r\n  return true;\r\n}\r\n\r\nwsServer.on('request', function(request) {\r\n    if (!originIsAllowed(request.origin)) {\r\n      // Make sure we only accept requests from an allowed origin\r\n      request.reject();\r\n      console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');\r\n      return;\r\n    }\r\n\r\n    var connection = request.accept('echo-protocol', request.origin);\r\n    console.log((new Date()) + ' Connection accepted.');\r\n    connection.on('message', function(message) {\r\n        if (message.type === 'utf8') {\r\n            console.log('Received Message: ' + message.utf8Data);\r\n            connection.sendUTF(message.utf8Data);\r\n        }\r\n        else if (message.type === 'binary') {\r\n            console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');\r\n            connection.sendBytes(message.binaryData);\r\n        }\r\n    });\r\n    connection.on('close', function(reasonCode, description) {\r\n        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');\r\n    });\r\n});"]],"start1":241,"start2":241,"length1":7,"length2":2063}]],"length":2304,"saved":false}
{"ts":1361896373602,"patch":[[{"diffs":[[0,"ole.log("],[1,"\"test: \" + "],[0,"wsServer"]],"start1":1109,"start2":1109,"length1":16,"length2":27}]],"length":2315,"saved":false}
{"ts":1361896959381,"patch":[[{"diffs":[[0,"ver."],[-1,"location"],[1,"url"],[0,");\r\n"]],"start1":1133,"start2":1133,"length1":16,"length2":11}]],"length":2310,"saved":false}
{"ts":1361897155082,"patch":[[{"diffs":[[0,"sServer."],[-1,"url"],[1,"host"],[0,");\r\n\r\nfu"]],"start1":1129,"start2":1129,"length1":19,"length2":20}]],"length":2311,"saved":false}
{"ts":1361897331824,"patch":[[{"diffs":[[0,"le.log(\""],[-1,"te"],[1,"ho"],[0,"st: \" + "]],"start1":1110,"start2":1110,"length1":18,"length2":18}]],"length":2311,"saved":false}
{"ts":1361899646921,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"console.log(\"host: \" + wsServer.host);\r\n\r\n"],[0,"func"]],"start1":1101,"start2":1101,"length1":50,"length2":8}]],"length":2269,"saved":false}
{"ts":1361900032475,"patch":[[{"diffs":[[0,"uest.url);\r\n    "],[1,"//"],[0,"response.writeHe"]],"start1":514,"start2":514,"length1":32,"length2":34},{"diffs":[[0,"Head(404);\r\n"],[1,"    //response.end();\r\n    \r\n    response.writeHead(200, {'Content-Type': 'text/html'});\r\n    // write some content to the browser that your user will see\r\n    response.write('<h1>We are testing WebSocket.</h1>');\r\n    // close the response\r\n"],[0,"    response"]],"start1":546,"start2":546,"length1":24,"length2":266}]],"length":2513,"saved":false}
{"ts":1361903037980,"patch":[[{"diffs":[[0,"\n});\r\n\r\n"],[-1,"var "],[0,"wsServer"]],"start1":932,"start2":932,"length1":20,"length2":16}]],"length":2509,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361909312982,"patch":[[{"diffs":[[0,"v.PORT;\r"],[1,"\nvar IP = process.env.IP;\r"],[0,"\n\r\nvar s"]],"start1":380,"start2":380,"length1":16,"length2":42},{"diffs":[[0,"port);\r\n"],[1,"    console.log((new Date()) + ' Server is listening on host ' + IP);\r\n"],[0,"});\r\n\r\n"],[1,"var "],[0,"wsServer"]],"start1":951,"start2":951,"length1":23,"length2":98}]],"length":2610,"saved":false}
