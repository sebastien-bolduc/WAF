{"ts":1361726300261,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\r\n * @author      SÃ©bastien Bolduc    <sebastien.bolduc@gmail.com>\r\n * @version     0.0                 (current version number of program)\r\n * @since       2013-02-22          (the version of the package this class was first added to)\r\n */\r\n\r\n// create global namespace\r\nwindow.WAF = window.WAF || {};\r\nwindow.WAF.test = window.WAF.test || {};\r\nwindow.WAF.test.collision = window.WAF.test.collision || {};\r\n\r\n// using IIFE (Immediately-Invoked Function Expression) to give each file its own local scope\r\n(function(namespace, undefined) {\r\n    // public methods and properties\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param \r\n     * @return \r\n     */\r\n    namespace.Mario = function() {\r\n        spriteList = [];\r\n        spriteList.push(new window.WAF.game.css.graphics.SpriteImage(\"backgroundField\", \"spriteMario\", \"mario\"));\r\n        \r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = spriteList[0].width;\r\n        this.height = spriteList[0].height;\r\n        \r\n        this.hitbox = new window.WAF.game.Rectangle(this.x, this.y, spriteList[0].width, spriteList[0].height);\r\n    };\r\n    \r\n    /**\r\n     * Check the hitbox of the sprite for collision.\r\n     * \r\n     * @param hitboxList List of hitbox to compare to.\r\n     * @return\r\n     */\r\n    namespace.Mario.prototype.checkHitbox = function(hitboxList) {\r\n        var x = this.hitbox.x;  // last position of hitbox\r\n        var y = this.hitbox.y;\r\n        \r\n        this.hitbox.translate(this.x, this.y);\r\n        for (var i=0; i<hitboxList.length; i++) {\r\n            if (this.hitbox.intersects(hitboxList[i])) {\r\n                this.x = x;\r\n                this.y = y;\r\n                this.hitbox.translate(this.x, this.y);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Draw the mario sprite.\r\n     * \r\n     * @param\r\n     * @return\r\n     */\r\n    namespace.Mario.prototype.draw = function() {\r\n        for (var i=0; i<spriteList.length; i++) {\r\n            spriteList[i].translate(this.x, this.y);\r\n            this.hitbox.translate(spriteList[i].x, spriteList[i].y);\r\n        }  \r\n    };\r\n    \r\n    // private methods and properties\r\n    var collision = window.WAF.test.collision;\r\n    var spriteList = null;\r\n    \r\n}(window.WAF.test.collision = window.WAF.test.collision || {}));"]],"start1":0,"start2":0,"length1":0,"length2":2300}]],"length":2300}
{"contributors":[],"silentsave":false,"ts":1361726418056,"patch":[[{"diffs":[[0,"  * "],[-1,"Draw the mario sprite"],[1,"Update the position of mario"],[0,".\r\n "]],"start1":1785,"start2":1785,"length1":29,"length2":36},{"diffs":[[0,"ype."],[-1,"draw"],[1,"update"],[0," = f"]],"start1":1895,"start2":1895,"length1":12,"length2":14},{"diffs":[[0,"is.x, this.y);\r\n"],[-1,""],[0,"            this"]],"start1":2011,"start2":2011,"length1":32,"length2":32},{"diffs":[[0,"ist[i].y);\r\n"],[1,"        }\r\n    }\r\n    \r\n    /**\r\n     * Draw the mario sprite.\r\n     * \r\n     * @param\r\n     * @return\r\n     */\r\n    namespace.Mario.prototype.draw = function() {\r\n        for (var i=0; i<spriteList.length; i++) {\r\n            spriteList[i].draw();\r\n"],[0,"        }  \r"]],"start1":2085,"start2":2085,"length1":24,"length2":274}]],"length":2559,"saved":false}
{"ts":1361726549012,"patch":[[{"diffs":[[0,"        }\r\n    }"],[1,";"],[0,"\r\n    \r\n    /**\r"]],"start1":1749,"start2":1749,"length1":32,"length2":33},{"diffs":[[0,"    }\r\n    }"],[1,";"],[0,"\r\n    \r\n    "]],"start1":2102,"start2":2102,"length1":24,"length2":25}]],"length":2561,"saved":false}
