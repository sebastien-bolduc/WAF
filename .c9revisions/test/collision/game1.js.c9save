{"ts":1361726239868,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\r\n * @author      SÃ©bastien Bolduc    <sebastien.bolduc@gmail.com>\r\n * @version     0.0                 (current version number of program)\r\n * @since       2013-02-22          (the version of the package this class was first added to)\r\n */\r\n\r\n// create global namespace\r\nwindow.WAF = window.WAF || {};\r\nwindow.WAF.test = window.WAF.test || {};\r\nwindow.WAF.test.collision = window.WAF.test.collision || {};\r\n\r\n// using IIFE (Immediately-Invoked Function Expression) to give each file its own local scope\r\n(function(namespace, undefined) {\r\n    // public methods and properties\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param \r\n     * @return \r\n     */\r\n    namespace.Game1 = function() {\r\n        // call constructor of super class\r\n        window.WAF.game.Game.call(this);\r\n    };\r\n    \r\n    // inherits from Game (css)\r\n    var customObject = new window.WAF.utils.CustomObject();\r\n    customObject.extend(window.WAF.game.Game, window.WAF.test.collision.Game1);\r\n    \r\n    /**\r\n     * Allows the game to perform any initialization it needs to before starting to \r\n     * run.\r\n     * \r\n     * @param \r\n     * @return\r\n     */\r\n    namespace.Game1.prototype.initialize = function() {\r\n        // TODO: Add your initialization logic here\r\n        document.getElementById(\"element1\").innerHTML = \"Average frame per second (fps): --\";\r\n        document.getElementById(\"element2\").innerHTML = \"Average time between frame: -- ms\";\r\n        \r\n        // background\r\n        var initPosition = {};  // position of the background\r\n        initPosition.X = 0;\r\n        initPosition.Y = 0;\r\n        background = new window.WAF.game.css.graphics.BackgroundImage(\"game\", \"backgroundField\", \"field\", initPosition);\r\n        \r\n        // level\r\n        stage = new window.WAF.test.collision.Stage();\r\n        \r\n        // sprite\r\n        mario = new window.WAF.test.collision.Mario();\r\n        \r\n        // call function of super class\r\n        window.WAF.game.Game.prototype.initialize.call(this);\r\n    };\r\n    \r\n    /**\r\n     * Allows the game to run logic such as updating the world, checking for \r\n     * collisions, gathering input, and playing audio.\r\n     * \r\n     * @param gameTime GameTime object to update with the function call.\r\n     * @return \r\n     */\r\n    namespace.Game1.prototype.update = function(gameTime) {\r\n        // TODO: Add your update logic here\r\n        fps = gameTime.averageFramePerSecond();\r\n        tbf = gameTime.averageTimeBetweenFrame();\r\n        \r\n        // sprite...\r\n        function move(sprite, x, y) {\r\n            sprite.x += x;\r\n            sprite.y += y;\r\n            \r\n            // limit set by the world\r\n            if (sprite.x < 0) {\r\n                sprite.x -= x;\r\n            } else if (sprite.x > (document.getElementById(\"backgroundField\").scrollWidth - sprite.width)) {\r\n                sprite.x -= x;\r\n            }\r\n            \r\n            if (sprite.y <= 0) {\r\n                sprite.y -= y;\r\n            } else if (sprite.y >= (document.getElementById(\"backgroundField\").scrollHeight - sprite.height)) {\r\n                sprite.y -= y;\r\n            }\r\n            \r\n            // checking for collision\r\n            sprite.checkHitbox(stage.hitboxList);\r\n            \r\n            // scrolling the background\r\n            if (((sprite.x + sprite.width) - document.getElementById(\"backgroundField\").scrollLeft) > (window.innerWidth / 3 * 2)) {\r\n                background.scrollRight(x, false);\r\n            }\r\n            if ((sprite.x - document.getElementById(\"backgroundField\").scrollLeft) < (window.innerWidth / 3 * 1)) {\r\n                background.scrollLeft(-x, false);\r\n            }\r\n            if (((sprite.y + sprite.height) - document.getElementById(\"backgroundField\").scrollTop) > (window.innerHeight / 4 * 3)) {\r\n                background.scrollDown(y, false);\r\n            }\r\n            if ((sprite.y - document.getElementById(\"backgroundField\").scrollTop) < (window.innerHeight / 4 * 1)) {\r\n                background.scrollUp(-y, false);\r\n            }\r\n        }\r\n        \r\n        // keyboard...\r\n        var keyboardState = this.keyboard.getState();\r\n        if (keyboardState.isKeyDown(window.WAF.inputs.Keys.Left)) {\r\n            move(mario, -5, 0);\r\n        }\r\n        if (keyboardState.isKeyDown(window.WAF.inputs.Keys.Right)) {\r\n            move(mario, 5, 0);\r\n        }\r\n        if (keyboardState.isKeyDown(window.WAF.inputs.Keys.Up)) {\r\n            move(mario, 0, -5);\r\n        }\r\n        if (keyboardState.isKeyDown(window.WAF.inputs.Keys.Down)) {\r\n            move(mario, 0, 5);\r\n        }\r\n        if (keyboardState.isKeyDownOnce(window.WAF.inputs.Keys.s)) {\r\n            if (this.charmBar.top) {\r\n                this.charmBar.hideTopCharmBar(\"status\");\r\n            } else {\r\n                this.charmBar.showTopCharmBar(\"status\");\r\n            }\r\n        }\r\n        \r\n        // touch...\r\n        var touchState = this.touch.getState();\r\n        if (touchState.hasBeenTouched()) {\r\n            if (this.charmBar.top) {\r\n                this.charmBar.hideTopCharmBar(\"status\");\r\n            } else {\r\n                this.charmBar.showTopCharmBar(\"status\");\r\n            }\r\n        }\r\n        \r\n        // call function of super class\r\n        window.WAF.game.Game.prototype.update.call(this, gameTime);\r\n    };\r\n    \r\n    /**\r\n     * This is called when the game should draw itself.\r\n     * \r\n     * @param \r\n     * @return \r\n     */\r\n    namespace.Game1.prototype.draw = function() {\r\n        // TODO: Add your drawing code here\r\n        document.getElementById(\"element1\").innerHTML = \"Average frame per second (fps): \" + fps;\r\n        document.getElementById(\"element2\").innerHTML = \"Average time between frame: \" + tbf + \" ms\";\r\n        \r\n        // sprite\r\n        mario.draw();\r\n        \r\n        // call function of super class\r\n        window.WAF.game.Game.prototype.draw.call(this);\r\n    };\r\n    \r\n    // private methods and properties\r\n    var collision = window.WAF.test.collision;\r\n    var fps = 0;\r\n    var tbf = 0;\r\n    var background = null;\r\n    var stage = null;\r\n    var mario = null;\r\n    \r\n}(window.WAF.test.collision = window.WAF.test.collision || {}));"]],"start1":0,"start2":0,"length1":0,"length2":6170}]],"length":6170}
{"contributors":[],"silentsave":false,"ts":1361726265374,"patch":[[{"diffs":[[0,"ms\";\r\n        \r\n"],[1,"        // background\r\n        background.draw();\r\n        \r\n"],[0,"        // sprit"]],"start1":5723,"start2":5723,"length1":32,"length2":93}]],"length":6231,"saved":false}
{"ts":1361726468194,"patch":[[{"diffs":[[0,"e();\r\n        \r\n"],[1,"        // game update...\r\n        mario.update();\r\n        \r\n"],[0,"        // sprit"]],"start1":2462,"start2":2462,"length1":32,"length2":94}]],"length":6293,"saved":false}
{"ts":1361727008396,"patch":[[{"diffs":[[0,"w();\r\n        \r\n"],[1,"        // stage\r\n        stage.draw();\r\n        \r\n"],[0,"        // sprit"]],"start1":5846,"start2":5846,"length1":32,"length2":83}]],"length":6344,"saved":false}
{"ts":1361727012994,"patch":[[{"diffs":[[0,"ge\r\n        "],[1,"//"],[0,"stage.draw()"]],"start1":5876,"start2":5876,"length1":24,"length2":26}]],"length":6346,"saved":false}
{"ts":1361727054780,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[0,"stage.dr"]],"start1":5880,"start2":5880,"length1":18,"length2":16}]],"length":6344,"saved":false}
