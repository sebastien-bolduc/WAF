{"ts":1361566621334,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\r\n * @author      SÃ©bastien Bolduc    <sebastien.bolduc@gmail.com>\r\n * @version     0.0                 (current version number of program)\r\n * @since       2013-02-21          (the version of the package this class was first added to)\r\n */\r\n\r\n// create global namespace\r\nwindow.WAF = window.WAF || {};\r\nwindow.WAF.test= window.WAF.test || {};\r\n\r\n// using IIFE (Immediately-Invoked Function Expression) to give each file its own local scope\r\n(function(namespace, undefined) {\r\n    // public methods and properties\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param \r\n     * @return \r\n     */\r\n    namespace.Game1 = function() {\r\n        // call constructor of super class\r\n        window.WAF.game.Game.call(this);\r\n    };\r\n    \r\n    // inherits from Game (css)\r\n    var customObject = new window.WAF.utils.CustomObject();\r\n    customObject.extend(window.WAF.game.Game, window.WAF.test.Game1);\r\n    \r\n    /**\r\n     * Allows the game to perform any initialization it needs to before starting to \r\n     * run.\r\n     * \r\n     * @param \r\n     * @return\r\n     */\r\n    namespace.Game1.prototype.initialize = function() {\r\n        // TODO: Add your initialization logic here\r\n        document.getElementById(\"element1\").innerHTML = \"Average frame per second (fps): --\";\r\n        document.getElementById(\"element2\").innerHTML = \"Average time between frame: -- ms\";\r\n        \r\n        // background\r\n        var initPosition = {};  // position of the background\r\n        initPosition.X = 0;\r\n        initPosition.Y = 0;\r\n        background = new window.WAF.game.css.graphics.BackgroundImage(\"game\", \"backgroundField\", \"field\", initPosition);\r\n        \r\n        // background (loop)\r\n        /*var initPosition = {};  // position of the background\r\n        initPosition.X = 2592;\r\n        initPosition.Y = 1944;\r\n        background = new window.WAF.game.css.graphics.BackgroundImage(\"game\", \"backgroundField\", \"fieldLoop\", initPosition);*/\r\n        \r\n        // sprite\r\n        spriteList = [];\r\n        for (var i=0; i<20; i++) {\r\n            spriteList.push(new window.WAF.game.css.graphics.SpriteImage(\"backgroundField\", \"spriteMario\" + i, \"mario\"));\r\n            spriteList[i].translate(Math.floor(Math.random()*800), 0);\r\n            spriteList[i].xIncrement = Math.floor(Math.random()*5 + 1);\r\n            spriteList[i].yIncrement = Math.floor(Math.random()*5 + 1);\r\n        }\r\n        \r\n        // call function of super class\r\n        window.WAF.game.Game.prototype.initialize.call(this);\r\n    };\r\n    \r\n    /**\r\n     * Allows the game to run logic such as updating the world, checking for \r\n     * collisions, gathering input, and playing audio.\r\n     * \r\n     * @param gameTime GameTime object to update with the function call.\r\n     * @return \r\n     */\r\n    namespace.Game1.prototype.update = function(gameTime) {\r\n        // TODO: Add your update logic here\r\n        fps = gameTime.averageFramePerSecond();\r\n        tbf = gameTime.averageTimeBetweenFrame();\r\n        \r\n        // sprite...\r\n        function move(sprite) {\r\n            sprite.x += sprite.xIncrement;\r\n            sprite.y += sprite.yIncrement;\r\n            \r\n            if (sprite.x <= 0) {\r\n                sprite.xIncrement = -sprite.xIncrement;\r\n            } else if (sprite.x >= (document.getElementById(\"backgroundField\").scrollWidth - 256 - 15)) {\r\n                sprite.xIncrement = -sprite.xIncrement;\r\n            }\r\n            \r\n            if (sprite.y <= 0) {\r\n                sprite.yIncrement = -sprite.yIncrement;\r\n            } else if (sprite.y >= (document.getElementById(\"backgroundField\").scrollHeight - 256 - 15)) {\r\n                sprite.yIncrement = -sprite.yIncrement;\r\n            }\r\n        }\r\n        for (var i=0; i<spriteList.length; i++) {\r\n            move(spriteList[i]);\r\n        }\r\n        \r\n        // keyboard...\r\n        var keyboardState = this.keyboard.getState();\r\n        if (keyboardState.isKeyDown(window.WAF.inputs.Keys.Left)) {\r\n            background.scrollLeft(5, false);\r\n        }\r\n        if (keyboardState.isKeyDown(window.WAF.inputs.Keys.Right)) {\r\n            background.scrollRight(5, false);\r\n        }\r\n        if (keyboardState.isKeyDown(window.WAF.inputs.Keys.Up)) {\r\n            background.scrollUp(5, false);\r\n        }\r\n        if (keyboardState.isKeyDown(window.WAF.inputs.Keys.Down)) {\r\n            background.scrollDown(5, false);\r\n        }\r\n        if (keyboardState.isKeyDownOnce(window.WAF.inputs.Keys.s)) {\r\n            if (this.charmBar.top) {\r\n                this.charmBar.hideTopCharmBar(\"status\");\r\n            } else {\r\n                this.charmBar.showTopCharmBar(\"status\");\r\n            }\r\n        }\r\n        \r\n        // touch...\r\n        var touchState = this.touch.getState();\r\n        if (touchState.hasBeenTouched()) {\r\n            if (this.charmBar.top) {\r\n                this.charmBar.hideTopCharmBar(\"status\");\r\n            } else {\r\n                this.charmBar.showTopCharmBar(\"status\");\r\n            }\r\n        }\r\n        \r\n        // call function of super class\r\n        window.WAF.game.Game.prototype.update.call(this, gameTime);\r\n    };\r\n    \r\n    /**\r\n     * This is called when the game should draw itself.\r\n     * \r\n     * @param \r\n     * @return \r\n     */\r\n    namespace.Game1.prototype.draw = function() {\r\n        // TODO: Add your drawing code here\r\n        document.getElementById(\"element1\").innerHTML = \"Average frame per second (fps): \" + fps;\r\n        document.getElementById(\"element2\").innerHTML = \"Average time between frame: \" + tbf + \" ms\";\r\n        \r\n        // sprite\r\n        for (var i=0; i<spriteList.length; i++) {\r\n            spriteList[i].translate(spriteList[i].x, spriteList[i].y);\r\n        }\r\n        \r\n        // call function of super class\r\n        window.WAF.game.Game.prototype.draw.call(this);\r\n    };\r\n    \r\n    // private methods and properties\r\n    var test = window.WAF.test;\r\n    var fps = 0;\r\n    var tbf = 0;\r\n    var background = null;\r\n    var spriteList = null;\r\n    \r\n}(window.WAF.test = window.WAF.test || {}));"]],"start1":0,"start2":0,"length1":0,"length2":6032}]],"length":6032}
{"contributors":[],"silentsave":false,"ts":1361566713695,"patch":[[{"diffs":[[0," || {};\r"],[1,"\nwindow.WAF.test.background = window.WAF.test.background || {};\r"],[0,"\n\r\n// us"]],"start1":339,"start2":339,"length1":16,"length2":80},{"diffs":[[0,"AF.test."],[1,"background."],[0,"Game1);\r"]],"start1":947,"start2":947,"length1":16,"length2":27},{"diffs":[[0,"WAF.test"],[1,".background"],[0,";\r\n    v"]],"start1":5954,"start2":5954,"length1":16,"length2":27},{"diffs":[[0,"dow.WAF.test"],[1,".background"],[0," = window.WA"]],"start1":6079,"start2":6079,"length1":24,"length2":35},{"diffs":[[0,"dow.WAF.test"],[1,".background"],[0," || {}));"]],"start1":6108,"start2":6108,"length1":21,"length2":32}]],"length":6140,"saved":false}
{"ts":1361566722286,"patch":[[{"diffs":[[0,"WAF.test"],[1," "],[0,"= window"]],"start1":314,"start2":314,"length1":16,"length2":17}]],"length":6141,"saved":false}
