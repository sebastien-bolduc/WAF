{"ts":1361201683975,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1361202149128,"patch":[[{"diffs":[[1,"/**\r\n * @author      SÃ©bastien Bolduc    <sebastien.bolduc@gmail.com>\r\n * @version     0.0                 (current version number of program)\r\n * @since       2013-02-18          (the version of the package this class was first added to)\r\n */\r\n\r\n// create global namespace\r\nwindow.WAF = window.WAF || {};\r\nwindow.WAF.input = window.WAF.input || {};\r\n\r\n// some constant for handling the keyboard keys\r\nwindow.WAF.input.Keys = {};\r\nwindow.WAF.input.Keys.Left = 37;     // Left cursor key\r\nwindow.WAF.input.Keys.Up = 38;       // Up cursor key\r\nwindow.WAF.input.Keys.Right = 39;    // Right cursor key\r\nwindow.WAF.input.Keys.Down = 40;     // Down cursor ke\r\n\r\n// using IIFE (Immediately-Invoked Function Expression) to give each file its own local scope\r\n(function(namespace, undefined) {\r\n    // public methods and properties\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param \r\n     * @return \r\n     */\r\n    namespace.Keyboard = function() {\r\n        this.keyboardState = new window.WAF.input.KeyboardState();\r\n    };\r\n    \r\n    /**\r\n    * Returns the current keyboard or Chatpad state.\r\n    * \r\n    * @param\r\n    * @return The state of the keyboard\r\n    */\r\n    namespace.Keyboard.prototype.getState = function()\r\n    {\r\n        return this.keyboardState;\r\n    };\r\n    \r\n    // private methods and properties\r\n    var input = window.WAF.input;\r\n    \r\n}(window.WAF.input = window.WAF.input || {}));"]],"start1":0,"start2":0,"length1":0,"length2":1402}]],"length":1402,"saved":false}
